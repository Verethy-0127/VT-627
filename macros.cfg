######################### PRINT START / END #########################
[gcode_macro PRINT_START]
gcode:
    {% set REFERENCED_TOOLS = params.REFERENCED_TOOLS|default("")|string %}
    {% set INITIAL_TOOL = params.INITIAL_TOOL|default(0)|int %}
    
    {% if REFERENCED_TOOLS == "!referenced_tools!" %}
        RESPOND MSG="Happy Hare gcode pre-processor is disabled"
    {% set REFERENCED_TOOLS = INITIAL_TOOL %}
    {% elif REFERENCED_TOOLS == "" %}
        RESPOND MSG="Happy Hare single color print"
    {% set REFERENCED_TOOLS = INITIAL_TOOL %}
    {% endif %}
    {% set HOTEND_TEMP = params.HOTEND|default(245)|float %}
    {% set chamber = params.CHAMBER|default(0)|int %}
    {% set bed = params.BED|int %}
	M104 S150
    M140 S{bed}
    SKEW_PROFILE LOAD=CaliFlower
    CG28
    G90
    M106 S0
    BED_MESH_CLEAR
    G32
    Smart_Park
	M109 S{HOTEND_TEMP}
    MMU_CHECK_GATE TOOLS={REFERENCED_TOOLS}
    MMU_CHANGE_TOOL STANDALONE=1 TOOL={INITIAL_TOOL}
    #LINE_PURGE
    

[gcode_macro PRINT_END]
gcode:
    {% set EJECT_FILAMENT = params.EJECT_FILAMENT|default(0)|int %}
    {% if EJECT_FILAMENT|int == 1 %}
        MMU_EJECT
    {% endif %}
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400
    G92 E0
    G1 E-8.0 F3600
    
    TURN_OFF_HEATERS
    
    G90
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000
    G0 X260 Y{th.axis_maximum.y - 2} F3600
    M107
    SET_FAN_SPEED FAN=Nevermore SPEED=0
    #M18
    SET_SKEW CLEAR=1
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

######################### SENSORLESS #########################

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[homing_override]
axes: xyz
set_position_z: -1.8

gcode:
  {% set Z = 20  %}
    G90
    G1 Z{Z}  # Z lift

  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

  {% if home_all or 'X' in params %}
    _HOME_X
  {% endif %}
  
  {% if home_all or 'Y' in params %}
    _HOME_Y
  {% endif %}
  
  {% if home_all or 'Z' in params %}
    G90
    G0 Y150 F{200*60} X150 F{200*60}
    G28 Z
    G1 Z10
  {% endif %}

######################### MISC #########################

[gcode_macro SWIPE_NOZZLE]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=SWIPENOZZLE
    G90
    G0 X245 Y306 F9000
    G0 Z0 F1500
    G0 X220 F9000
    G0 X245 F9000
    G0 X220 F9000
    G0 X245 F9000
    G0 X220 F9000
    G0 X245 F9000
    G0 X220 F9000
    G0 Z15  F1500
    RESTORE_GCODE_STATE NAME=SWIPENOZZLE

[gcode_macro G32]
gcode:
    CG28
    BED_MESH_CLEAR
    #SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=15
    Z_TILT_ADJUST
    G0 X150 Y150 Z5 F19500
    G28 Z
    BMC
    #SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=20

[gcode_macro Purge]
gcode:
    {% set HOTEND_TEMP = params.HOTEND_TEMP|default(245)|float %}
    CG28
    G90
    G0 X261 Y300 F6000
    M109 S{HOTEND_TEMP}  
    G0 Z0.5 F6000
    M83
    G1 E100 F300
    G1 E-10 F300
    G4 P10000
    G0 X210 F600
    G0 Z10
    M104 S150
    PARKBED

[gcode_macro HEATSOAK]
gcode:
    # Parameters
    {% set t = params.T|default(110)|int %}
    {% set move = params.MOVE|default(1)|int %}

    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0
    M140 S{t}
    {% if t >= 100 %}
        M104 S150
        M106 S205
    {% else %}
        M106 S0
    {% endif %}
    {% if move == 1 %}
        CG28
        PARKBED
    {% endif %}

[gcode_macro MMU_Disable]
gcode:
    MMU ENABLE=0

[gcode_macro MMU_Enable]
gcode:
    MMU ENABLE=1
######################### CONDITIONAL HOMING #########################

[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    
[gcode_macro XYCG28]
gcode:
    {% if "xy" not in printer.toolhead.homed_axes %}
        G28 X Y
    {% endif %}

[gcode_macro ZCG28]
gcode:
    {% if "z" not in printer.toolhead.homed_axes %}
        G28 Z
    {% endif %}
    
######################### PARKING #########################

[gcode_macro PARKFRONT]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90
    G0 X150 Y0 Z50 F19500        
    RESTORE_GCODE_STATE NAME=PARKFRONT
    
[gcode_macro PARKREAR]
gcode:
    CG28 
    SAVE_GCODE_STATE NAME=PARKREAR
    G90
    G0 X200 Y300 Z10 F19500     
    RESTORE_GCODE_STATE NAME=PARKREAR
    
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKBED
    G90
    G0 X150 Y150 Z15 F19500                                     
    RESTORE_GCODE_STATE NAME=PARKBED
    
######################### ALIASES/SHORTCUTS #########################

[gcode_macro BMC]
gcode:
    CG28
    BED_MESH_CALIBRATE

[gcode_macro OFF]
gcode:
    M84
    TURN_OFF_HEATERS
    M107
    SET_FAN_SPEED FAN=Nevermore SPEED=0
    SET_PIN PIN=caselight VALUE=0

[gcode_macro M600]
gcode:
    PAUSE

######################### FAST INFILL #########################

[gcode_macro _USE_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sqv = svv.infill_sqv | default(printer.configfile.settings.printer.square_corner_velocity, true) %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro _USE_NORMAL_SQV]
gcode:
    {% set sqv = printer.configfile.settings.printer.square_corner_velocity %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro SET_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set val = params.SQV|default(svv.infill_sqv|default(printer.configfile.settings.printer.square_corner_velocity, true), true) | int %}
    SAVE_VARIABLE VARIABLE=infill_sqv VALUE={val}

######################### GCODE BUTTONS #########################

[gcode_button BUTTON_CASELIGHT]
pin: ^!PG14
press_gcode:
    SET_PIN PIN=caselight VALUE=1
release_gcode:
    SET_PIN PIN=caselight VALUE=0.1

[gcode_button BUTTON_NOZZLE_LED]
pin: ^!PG15
press_gcode:
    SET_LED LED="hotend_rgb" RED=0 GREEN=0 BLUE=0 WHITE=1 SYNC=0 TRANSMIT=1
release_gcode:
    SET_LED LED="hotend_rgb" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1

######################### GITHUB BACKUP #########################

[gcode_shell_command backup_cfg]
command: ~/printer_data/config/autocommit.sh
timeout: 30.
verbose: True

[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg


########################## Filamentalist ##########################

[gcode_macro rewinder_test]
gcode:
    MMU_TEST_LOAD LENGTH=50
    {% for n in range(20) %}

# cycles currently set at 20, i.e. range(20).  You can changes this however you chose.
        MMU_SERVO POS=DOWN
#        MANUAL_STEPPER STEPPER="gear_stepper" SPEED=300 ACCEL=400 MOVE=800
        MMU_TEST_MOVE SPEED=300 ACCEL=400 MOVE=800
# change the SPEED and ACCEL as you see fit
        MMU_SERVO POS=UP
# to stop a macro mid-cycle you must use the e-stop.  This dwell allows you to hit the e-stop while the servo is up so that you can pull the filament out of the ERCF while the printer/macro is stopped
        MMU_SERVO POS=DOWN
        MMU_TEST_MOVE SPEED=300 ACCEL=400 MOVE=-800
        MMU_SERVO POS=UP

    {% endfor %}


[gcode_macro rewinder_test_multitool]
gcode:
    {% set gates = [5] %} # [0,1,2,3,4,5] move between these gates
    {% set test_load_length = params.TEST_LOAD_LENGTH | default(50) | float %}
    {% set repeats = params.REPEATS | default(20) | int %}
    {% set speed = params.SPEED | default(300) | float %}
    {% set accel = params.ACCEL | default(400) | float %}
    {% set length = params.LENGTH | default(800) | float %}

    MMU_HOME

#    MMU_TEST_LOAD LENGTH=50
    {% for n in range(repeats) %}
        {% for gate in gates %}
            MMU_SELECT GATE={gate}
            MMU_TEST_LOAD LENGTH={test_load_length} # preload gate for a bit of length
            MMU_TEST_MOVE SPEED={speed} ACCEL={accel} MOVE={length}
            MMU_SERVO POS=UP
            MMU_TEST_MOVE SPEED={speed} ACCEL={accel} MOVE=-{length}
            MMU_EJECT
            MMU_RECOVER

        {% endfor %}
  
    {% endfor %}